"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const os = require("os");
const path = require("path");
const semver = require("semver");
const lib_1 = require("../lib");
const FIXTURES = path.join(__dirname, 'fixtures');
function fixture(name) {
    return path.join(FIXTURES, name, 'manifest.json');
}
test('manifest save', () => {
    const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'schema-tests'));
    const manifestFile = path.join(outdir, 'manifest.json');
    const assemblyManifest = {
        version: 'version',
        runtime: {
            libraries: { lib1: '1.2.3' },
        },
    };
    lib_1.Manifest.saveAssemblyManifest(assemblyManifest, manifestFile);
    const saved = JSON.parse(fs.readFileSync(manifestFile, { encoding: 'utf-8' }));
    expect(saved).toEqual({
        ...assemblyManifest,
        version: lib_1.Manifest.version(),
    });
});
test('manifest load', () => {
    const loaded = lib_1.Manifest.loadAssemblyManifest(fixture('only-version'));
    expect(loaded).toMatchSnapshot();
});
test('manifest load fails for invalid nested property', () => {
    expect(() => lib_1.Manifest.loadAssemblyManifest(fixture('invalid-nested-property'))).toThrow(/Invalid assembly manifest/);
});
test('manifest load fails for invalid artifact type', () => {
    expect(() => lib_1.Manifest.loadAssemblyManifest(fixture('invalid-artifact-type'))).toThrow(/Invalid assembly manifest/);
});
test('manifest load fails on higher major version', () => {
    expect(() => lib_1.Manifest.loadAssemblyManifest(fixture('high-version'))).toThrow(/Cloud assembly schema version mismatch/);
});
// once we start introducing minor version bumps that are considered
// non breaking, this test can be removed.
test('manifest load fails on higher minor version', () => {
    const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'schema-tests'));
    const manifestFile = path.join(outdir, 'manifest.json');
    const newVersion = semver.inc(lib_1.Manifest.version(), 'minor');
    expect(newVersion).toBeTruthy();
    if (newVersion) {
        const assemblyManifest = {
            version: newVersion,
        };
        // can't use saveAssemblyManifest because it will force the correct version
        fs.writeFileSync(manifestFile, JSON.stringify(assemblyManifest));
        expect(() => lib_1.Manifest.loadAssemblyManifest(manifestFile)).toThrow(/Cloud assembly schema version mismatch/);
    }
});
// once we start introducing patch version bumps that are considered
// non breaking, this test can be removed.
test('manifest load fails on higher patch version', () => {
    const outdir = fs.mkdtempSync(path.join(os.tmpdir(), 'schema-tests'));
    const manifestFile = path.join(outdir, 'manifest.json');
    const newVersion = semver.inc(lib_1.Manifest.version(), 'patch');
    expect(newVersion).toBeTruthy();
    if (newVersion) {
        const assemblyManifest = {
            version: newVersion,
        };
        // can't use saveAssemblyManifest because it will force the correct version
        fs.writeFileSync(manifestFile, JSON.stringify(assemblyManifest));
        expect(() => lib_1.Manifest.loadAssemblyManifest(manifestFile)).toThrow(/Cloud assembly schema version mismatch/);
    }
});
test('manifest load fails on invalid version', () => {
    expect(() => lib_1.Manifest.loadAssemblyManifest(fixture('invalid-version'))).toThrow(/Invalid semver string/);
});
test('manifest load succeeds on unknown properties', () => {
    const manifest = lib_1.Manifest.loadAssemblyManifest(fixture('unknown-property'));
    expect(manifest.version).toEqual('0.0.0');
});
test('stack-tags are deserialized properly', () => {
    var _a, _b, _c;
    const m = lib_1.Manifest.loadAssemblyManifest(fixture('with-stack-tags'));
    if ((_c = (_b = (_a = m.artifacts) === null || _a === void 0 ? void 0 : _a.stack) === null || _b === void 0 ? void 0 : _b.metadata) === null || _c === void 0 ? void 0 : _c.AwsCdkPlaygroundBatch[0].data) {
        const entry = m.artifacts.stack.metadata.AwsCdkPlaygroundBatch[0].data;
        expect(entry[0].key).toEqual('hello');
        expect(entry[0].value).toEqual('world');
    }
    expect(m.version).toEqual('0.0.0');
});
test('can access random metadata', () => {
    var _a, _b, _c, _d, _e, _f;
    const loaded = lib_1.Manifest.loadAssemblyManifest(fixture('random-metadata'));
    const randomArray = (_b = (_a = loaded.artifacts) === null || _a === void 0 ? void 0 : _a.stack.metadata) === null || _b === void 0 ? void 0 : _b.AwsCdkPlaygroundBatch[0].data;
    const randomNumber = (_d = (_c = loaded.artifacts) === null || _c === void 0 ? void 0 : _c.stack.metadata) === null || _d === void 0 ? void 0 : _d.AwsCdkPlaygroundBatch[1].data;
    const randomMap = (_f = (_e = loaded.artifacts) === null || _e === void 0 ? void 0 : _e.stack.metadata) === null || _f === void 0 ? void 0 : _f.AwsCdkPlaygroundBatch[2].data;
    expect(randomArray).toEqual(['42']);
    expect(randomNumber).toEqual(42);
    expect(randomMap).toEqual({
        key: 'value',
    });
    expect(randomMap).toBeTruthy();
    if (randomMap) {
        expect(randomMap.key).toEqual('value');
    }
});
//# sourceMappingURL=data:application/json;base64,