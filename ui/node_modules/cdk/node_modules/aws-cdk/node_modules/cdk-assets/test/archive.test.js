"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.contentHash = void 0;
const child_process_1 = require("child_process");
const crypto = require("crypto");
const fs_1 = require("fs");
const jszip = require("jszip");
const os = require("os");
const path = require("path");
const util_1 = require("util");
const archive_1 = require("../lib/private/archive");
const fs_extra_1 = require("../lib/private/fs-extra");
const exec = util_1.promisify(child_process_1.exec);
test('zipDirectory can take a directory and produce a zip from it', async () => {
    const stagingDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
    const extractDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive.extract'));
    try {
        const zipFile = path.join(stagingDir, 'output.zip');
        const originalDir = path.join(__dirname, 'test-archive');
        await archive_1.zipDirectory(originalDir, zipFile);
        // unzip and verify that the resulting tree is the same
        await exec(`unzip ${zipFile}`, { cwd: extractDir });
        await expect(exec(`diff -bur ${originalDir} ${extractDir}`)).resolves.toBeTruthy();
        // inspect the zile file to check that dates are reset
        const zip = await fs_1.promises.readFile(zipFile);
        const zipData = await jszip.loadAsync(zip);
        const dates = Object.values(zipData.files).map(file => file.date.toISOString());
        expect(dates[0]).toBe('1980-01-01T00:00:00.000Z');
        expect(new Set(dates).size).toBe(1);
        // check that mode is preserved
        const stat = await fs_1.promises.stat(path.join(extractDir, 'executable.txt'));
        // tslint:disable-next-line:no-bitwise
        const isExec = (stat.mode & fs_1.constants.S_IXUSR) || (stat.mode & fs_1.constants.S_IXGRP) || (stat.mode & fs_1.constants.S_IXOTH);
        expect(isExec).toBeTruthy();
    }
    finally {
        fs_extra_1.rmRfSync(stagingDir);
        fs_extra_1.rmRfSync(extractDir);
    }
});
test('md5 hash of a zip stays consistent across invocations', async () => {
    const stagingDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
    const zipFile1 = path.join(stagingDir, 'output.zip');
    const zipFile2 = path.join(stagingDir, 'output.zip');
    const originalDir = path.join(__dirname, 'test-archive');
    await archive_1.zipDirectory(originalDir, zipFile1);
    await new Promise(ok => setTimeout(ok, 2000)); // wait 2s
    await archive_1.zipDirectory(originalDir, zipFile2);
    const hash1 = contentHash(await fs_1.promises.readFile(zipFile1));
    const hash2 = contentHash(await fs_1.promises.readFile(zipFile2));
    expect(hash1).toEqual(hash2);
});
test('zipDirectory follows symlinks', async () => {
    const stagingDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive'));
    const extractDir = await fs_1.promises.mkdtemp(path.join(os.tmpdir(), 'test.archive.follow'));
    try {
        const originalDir = path.join(__dirname, 'test-archive-follow', 'data');
        const zipFile = path.join(stagingDir, 'output.zip');
        await expect(archive_1.zipDirectory(originalDir, zipFile)).resolves.toBeUndefined();
        await expect(exec(`unzip ${zipFile}`, { cwd: extractDir })).resolves.toBeDefined();
        await expect(exec(`diff -bur ${originalDir} ${extractDir}`)).resolves.toBeDefined();
    }
    finally {
        fs_extra_1.rmRfSync(stagingDir);
        fs_extra_1.rmRfSync(extractDir);
    }
});
function contentHash(data) {
    return crypto.createHash('sha256').update(data).digest('hex');
}
exports.contentHash = contentHash;
//# sourceMappingURL=data:application/json;base64,