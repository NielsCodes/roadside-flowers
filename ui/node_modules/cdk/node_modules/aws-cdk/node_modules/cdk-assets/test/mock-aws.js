"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockUpload = exports.mockedApiFailure = exports.mockedApiResult = exports.errorWithCode = exports.mockAws = void 0;
jest.mock('aws-sdk');
const AWS = require("aws-sdk");
function mockAws() {
    const mockEcr = new AWS.ECR();
    const mockS3 = new AWS.S3();
    // Sane defaults which can be overridden
    mockS3.getBucketLocation = mockedApiResult({});
    mockEcr.describeRepositories = mockedApiResult({ repositories: [
            {
                repositoryUri: '12345.amazonaws.com/repo',
            },
        ] });
    return {
        mockEcr,
        mockS3,
        discoverCurrentAccount: jest.fn(() => Promise.resolve({ accountId: 'current_account', partition: 'swa' })),
        discoverDefaultRegion: jest.fn(() => Promise.resolve('current_region')),
        ecrClient: jest.fn(() => Promise.resolve(mockEcr)),
        s3Client: jest.fn(() => Promise.resolve(mockS3)),
    };
}
exports.mockAws = mockAws;
function errorWithCode(code, message) {
    const ret = new Error(message);
    ret.code = code;
    return ret;
}
exports.errorWithCode = errorWithCode;
function mockedApiResult(returnValue) {
    return jest.fn().mockReturnValue({
        promise: jest.fn().mockResolvedValue(returnValue),
    });
}
exports.mockedApiResult = mockedApiResult;
function mockedApiFailure(code, message) {
    return jest.fn().mockReturnValue({
        promise: jest.fn().mockRejectedValue(errorWithCode(code, message)),
    });
}
exports.mockedApiFailure = mockedApiFailure;
/**
 * Mock upload, draining the stream that we get before returning
 * so no race conditions happen with the uninstallation of mock-fs.
 */
function mockUpload(expectContent) {
    return jest.fn().mockImplementation(request => ({
        promise: () => new Promise((ok, ko) => {
            const didRead = new Array();
            const bodyStream = request.Body;
            bodyStream.on('data', (chunk) => { didRead.push(chunk.toString()); }); // This listener must exist
            bodyStream.on('error', ko);
            bodyStream.on('close', () => {
                const actualContent = didRead.join('');
                if (expectContent !== undefined && expectContent !== actualContent) {
                    throw new Error(`Expected to read '${expectContent}' but read: '${actualContent}'`);
                }
                ok();
            });
        }),
    }));
}
exports.mockUpload = mockUpload;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9jay1hd3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtb2NrLWF3cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JCLCtCQUErQjtBQUUvQixTQUFnQixPQUFPO0lBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzlCLE1BQU0sTUFBTSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBRTVCLHdDQUF3QztJQUN4QyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLE9BQU8sQ0FBQyxvQkFBb0IsR0FBRyxlQUFlLENBQUMsRUFBRSxZQUFZLEVBQUU7WUFDN0Q7Z0JBQ0UsYUFBYSxFQUFFLDBCQUEwQjthQUMxQztTQUNGLEVBQUUsQ0FBQyxDQUFDO0lBRUwsT0FBTztRQUNMLE9BQU87UUFDUCxNQUFNO1FBQ04sc0JBQXNCLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsU0FBUyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1FBQzFHLHFCQUFxQixFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3ZFLFNBQVMsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsUUFBUSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNqRCxDQUFDO0FBQ0osQ0FBQztBQXBCRCwwQkFvQkM7QUFFRCxTQUFnQixhQUFhLENBQUMsSUFBWSxFQUFFLE9BQWU7SUFDekQsTUFBTSxHQUFHLEdBQUcsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUIsR0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDekIsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBSkQsc0NBSUM7QUFFRCxTQUFnQixlQUFlLENBQUMsV0FBZ0I7SUFDOUMsT0FBTyxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsZUFBZSxDQUFDO1FBQy9CLE9BQU8sRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDO0tBQ2xELENBQUMsQ0FBQztBQUNMLENBQUM7QUFKRCwwQ0FJQztBQUVELFNBQWdCLGdCQUFnQixDQUFDLElBQVksRUFBRSxPQUFlO0lBQzVELE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGVBQWUsQ0FBQztRQUMvQixPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7S0FDbkUsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUpELDRDQUlDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBZ0IsVUFBVSxDQUFDLGFBQXNCO0lBQy9DLE9BQU8sSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQVUsQ0FBQztZQUVwQyxNQUFNLFVBQVUsR0FBMEIsT0FBTyxDQUFDLElBQUksQ0FBQztZQUN2RCxVQUFVLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQUssRUFBRSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsMkJBQTJCO1lBQ2xHLFVBQVUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzNCLFVBQVUsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRTtnQkFDMUIsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDdkMsSUFBSSxhQUFhLEtBQUssU0FBUyxJQUFJLGFBQWEsS0FBSyxhQUFhLEVBQUU7b0JBQ2xFLE1BQU0sSUFBSSxLQUFLLENBQUMscUJBQXFCLGFBQWEsZ0JBQWdCLGFBQWEsR0FBRyxDQUFDLENBQUM7aUJBQ3JGO2dCQUNELEVBQUUsRUFBRSxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUM7S0FDSCxDQUFDLENBQUMsQ0FBQztBQUNOLENBQUM7QUFqQkQsZ0NBaUJDIiwic291cmNlc0NvbnRlbnQiOlsiamVzdC5tb2NrKCdhd3Mtc2RrJyk7XG5pbXBvcnQgKiBhcyBBV1MgZnJvbSAnYXdzLXNkayc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrQXdzKCkge1xuICBjb25zdCBtb2NrRWNyID0gbmV3IEFXUy5FQ1IoKTtcbiAgY29uc3QgbW9ja1MzID0gbmV3IEFXUy5TMygpO1xuXG4gIC8vIFNhbmUgZGVmYXVsdHMgd2hpY2ggY2FuIGJlIG92ZXJyaWRkZW5cbiAgbW9ja1MzLmdldEJ1Y2tldExvY2F0aW9uID0gbW9ja2VkQXBpUmVzdWx0KHt9KTtcbiAgbW9ja0Vjci5kZXNjcmliZVJlcG9zaXRvcmllcyA9IG1vY2tlZEFwaVJlc3VsdCh7IHJlcG9zaXRvcmllczogW1xuICAgIHtcbiAgICAgIHJlcG9zaXRvcnlVcmk6ICcxMjM0NS5hbWF6b25hd3MuY29tL3JlcG8nLFxuICAgIH0sXG4gIF0gfSk7XG5cbiAgcmV0dXJuIHtcbiAgICBtb2NrRWNyLFxuICAgIG1vY2tTMyxcbiAgICBkaXNjb3ZlckN1cnJlbnRBY2NvdW50OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZSh7IGFjY291bnRJZDogJ2N1cnJlbnRfYWNjb3VudCcsIHBhcnRpdGlvbjogJ3N3YScgfSkpLFxuICAgIGRpc2NvdmVyRGVmYXVsdFJlZ2lvbjogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUoJ2N1cnJlbnRfcmVnaW9uJykpLFxuICAgIGVjckNsaWVudDogamVzdC5mbigoKSA9PiBQcm9taXNlLnJlc29sdmUobW9ja0VjcikpLFxuICAgIHMzQ2xpZW50OiBqZXN0LmZuKCgpID0+IFByb21pc2UucmVzb2x2ZShtb2NrUzMpKSxcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVycm9yV2l0aENvZGUoY29kZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgY29uc3QgcmV0ID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAocmV0IGFzIGFueSkuY29kZSA9IGNvZGU7XG4gIHJldHVybiByZXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrZWRBcGlSZXN1bHQocmV0dXJuVmFsdWU6IGFueSkge1xuICByZXR1cm4gamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgcHJvbWlzZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHJldHVyblZhbHVlKSxcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtb2NrZWRBcGlGYWlsdXJlKGNvZGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gIHJldHVybiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcbiAgICBwcm9taXNlOiBqZXN0LmZuKCkubW9ja1JlamVjdGVkVmFsdWUoZXJyb3JXaXRoQ29kZShjb2RlLCBtZXNzYWdlKSksXG4gIH0pO1xufVxuXG4vKipcbiAqIE1vY2sgdXBsb2FkLCBkcmFpbmluZyB0aGUgc3RyZWFtIHRoYXQgd2UgZ2V0IGJlZm9yZSByZXR1cm5pbmdcbiAqIHNvIG5vIHJhY2UgY29uZGl0aW9ucyBoYXBwZW4gd2l0aCB0aGUgdW5pbnN0YWxsYXRpb24gb2YgbW9jay1mcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1vY2tVcGxvYWQoZXhwZWN0Q29udGVudD86IHN0cmluZykge1xuICByZXR1cm4gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbihyZXF1ZXN0ID0+ICh7XG4gICAgcHJvbWlzZTogKCkgPT4gbmV3IFByb21pc2UoKG9rLCBrbykgPT4ge1xuICAgICAgY29uc3QgZGlkUmVhZCA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XG5cbiAgICAgIGNvbnN0IGJvZHlTdHJlYW06IE5vZGVKUy5SZWFkYWJsZVN0cmVhbSA9IHJlcXVlc3QuQm9keTtcbiAgICAgIGJvZHlTdHJlYW0ub24oJ2RhdGEnLCAoY2h1bmspID0+IHsgZGlkUmVhZC5wdXNoKGNodW5rLnRvU3RyaW5nKCkpOyB9KTsgLy8gVGhpcyBsaXN0ZW5lciBtdXN0IGV4aXN0XG4gICAgICBib2R5U3RyZWFtLm9uKCdlcnJvcicsIGtvKTtcbiAgICAgIGJvZHlTdHJlYW0ub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICBjb25zdCBhY3R1YWxDb250ZW50ID0gZGlkUmVhZC5qb2luKCcnKTtcbiAgICAgICAgaWYgKGV4cGVjdENvbnRlbnQgIT09IHVuZGVmaW5lZCAmJiBleHBlY3RDb250ZW50ICE9PSBhY3R1YWxDb250ZW50KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCB0byByZWFkICcke2V4cGVjdENvbnRlbnR9JyBidXQgcmVhZDogJyR7YWN0dWFsQ29udGVudH0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgb2soKTtcbiAgICAgIH0pO1xuICAgIH0pLFxuICB9KSk7XG59Il19