"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_helpers_1 = require("./aws-helpers");
const cdk_helpers_1 = require("./cdk-helpers");
const test_helpers_1 = require("./test-helpers");
jest.setTimeout(600000);
const QUALIFIER = randomString();
beforeAll(async () => {
    await cdk_helpers_1.prepareAppFixture();
});
beforeEach(async () => {
    await cdk_helpers_1.cleanup();
});
afterEach(async () => {
    await cdk_helpers_1.cleanup();
});
test_helpers_1.integTest('can bootstrap without execution', async () => {
    var _a;
    const bootstrapStackName = cdk_helpers_1.fullStackName('bootstrap-stack');
    await cdk_helpers_1.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--no-execute']);
    const resp = await aws_helpers_1.cloudFormation('describeStacks', {
        StackName: bootstrapStackName,
    });
    expect((_a = resp.Stacks) === null || _a === void 0 ? void 0 : _a[0].StackStatus).toEqual('REVIEW_IN_PROGRESS');
});
test_helpers_1.integTest('upgrade legacy bootstrap stack to new bootstrap stack while in use', async () => {
    const bootstrapStackName = cdk_helpers_1.fullStackName('bootstrap-stack');
    const legacyBootstrapBucketName = `aws-cdk-bootstrap-integ-test-legacy-bckt-${randomString()}`;
    const newBootstrapBucketName = `aws-cdk-bootstrap-integ-test-v2-bckt-${randomString()}`;
    cdk_helpers_1.rememberToDeleteBucket(legacyBootstrapBucketName); // This one will leak
    cdk_helpers_1.rememberToDeleteBucket(newBootstrapBucketName); // This one shouldn't leak if the test succeeds, but let's be safe in case it doesn't
    // Legacy bootstrap
    await cdk_helpers_1.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--bootstrap-bucket-name', legacyBootstrapBucketName]);
    // Deploy stack that uses file assets
    await cdk_helpers_1.cdkDeploy('lambda', {
        options: ['--toolkit-stack-name', bootstrapStackName],
    });
    // Upgrade bootstrap stack to "new" style
    await cdk_helpers_1.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--bootstrap-bucket-name', newBootstrapBucketName,
        '--qualifier', QUALIFIER], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    // (Force) deploy stack again
    // --force to bypass the check which says that the template hasn't changed.
    await cdk_helpers_1.cdkDeploy('lambda', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
            '--force',
        ],
    });
});
test_helpers_1.integTest('deploy new style synthesis to new style bootstrap', async () => {
    const bootstrapStackName = cdk_helpers_1.fullStackName('bootstrap-stack');
    await cdk_helpers_1.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--qualifier', QUALIFIER,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess',
    ], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    // Deploy stack that uses file assets
    await cdk_helpers_1.cdkDeploy('lambda', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
            '--context', `@aws-cdk/core:bootstrapQualifier=${QUALIFIER}`,
            '--context', '@aws-cdk/core:newStyleStackSynthesis=1',
        ],
    });
});
test_helpers_1.integTest('deploy new style synthesis to new style bootstrap (with docker image)', async () => {
    const bootstrapStackName = cdk_helpers_1.fullStackName('bootstrap-stack');
    await cdk_helpers_1.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--qualifier', QUALIFIER,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess',
    ], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    // Deploy stack that uses file assets
    await cdk_helpers_1.cdkDeploy('docker', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
            '--context', `@aws-cdk/core:bootstrapQualifier=${QUALIFIER}`,
            '--context', '@aws-cdk/core:newStyleStackSynthesis=1',
        ],
    });
});
test_helpers_1.integTest('deploy old style synthesis to new style bootstrap', async () => {
    const bootstrapStackName = cdk_helpers_1.fullStackName('bootstrap-stack');
    await cdk_helpers_1.cdk(['bootstrap',
        '--toolkit-stack-name', bootstrapStackName,
        '--qualifier', QUALIFIER,
        '--cloudformation-execution-policies', 'arn:aws:iam::aws:policy/AdministratorAccess',
    ], {
        modEnv: {
            CDK_NEW_BOOTSTRAP: '1',
        },
    });
    // Deploy stack that uses file assets
    await cdk_helpers_1.cdkDeploy('lambda', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
        ],
    });
});
test_helpers_1.integTest('deploying new style synthesis to old style bootstrap fails', async () => {
    const bootstrapStackName = cdk_helpers_1.fullStackName('bootstrap-stack');
    await cdk_helpers_1.cdk(['bootstrap', '--toolkit-stack-name', bootstrapStackName]);
    // Deploy stack that uses file assets, this fails because the bootstrap stack
    // is version checked.
    await expect(cdk_helpers_1.cdkDeploy('lambda', {
        options: [
            '--toolkit-stack-name', bootstrapStackName,
            '--context', '@aws-cdk/core:newStyleStackSynthesis=1',
        ],
    })).rejects.toThrow('exited with error');
});
test_helpers_1.integTest('can create a legacy bootstrap stack with --public-access-block-configuration=false', async () => {
    var _a;
    const bootstrapStackName = cdk_helpers_1.fullStackName('bootstrap-stack-1');
    await cdk_helpers_1.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName, '--public-access-block-configuration', 'false', '--tags', 'Foo=Bar']);
    const response = await aws_helpers_1.cloudFormation('describeStacks', { StackName: bootstrapStackName });
    expect((_a = response.Stacks) === null || _a === void 0 ? void 0 : _a[0].Tags).toEqual([
        { Key: 'Foo', Value: 'Bar' },
    ]);
});
test_helpers_1.integTest('can create multiple legacy bootstrap stacks', async () => {
    var _a;
    const bootstrapStackName1 = cdk_helpers_1.fullStackName('bootstrap-stack-1');
    const bootstrapStackName2 = cdk_helpers_1.fullStackName('bootstrap-stack-2');
    // deploy two toolkit stacks into the same environment (see #1416)
    // one with tags
    await cdk_helpers_1.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName1, '--tags', 'Foo=Bar']);
    await cdk_helpers_1.cdk(['bootstrap', '-v', '--toolkit-stack-name', bootstrapStackName2]);
    const response = await aws_helpers_1.cloudFormation('describeStacks', { StackName: bootstrapStackName1 });
    expect((_a = response.Stacks) === null || _a === void 0 ? void 0 : _a[0].Tags).toEqual([
        { Key: 'Foo', Value: 'Bar' },
    ]);
});
function randomString() {
    // Crazy
    return Math.random().toString(36).replace(/[^a-z0-9]+/g, '');
}
//# sourceMappingURL=data:application/json;base64,