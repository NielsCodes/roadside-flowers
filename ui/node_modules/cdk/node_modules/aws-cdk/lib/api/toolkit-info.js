"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolkitInfo = exports.DEFAULT_TOOLKIT_STACK_NAME = void 0;
const colors = require("colors/safe");
const logging_1 = require("../logging");
const bootstrap_1 = require("./bootstrap");
const cloudformation_1 = require("./util/cloudformation");
exports.DEFAULT_TOOLKIT_STACK_NAME = 'CDKToolkit';
/**
 * Information on the Bootstrap stack
 *
 * Called "ToolkitInfo" for historical reasons.
 *
 * @experimental
 */
class ToolkitInfo {
    constructor(props) {
        this.props = props;
        this.sdk = props.sdk;
    }
    static determineName(overrideName) {
        return overrideName !== null && overrideName !== void 0 ? overrideName : exports.DEFAULT_TOOLKIT_STACK_NAME;
    }
    /** @experimental */
    static async lookup(environment, sdk, stackName) {
        var _a;
        const cfn = sdk.cloudFormation();
        const stack = await cloudformation_1.stabilizeStack(cfn, stackName !== null && stackName !== void 0 ? stackName : exports.DEFAULT_TOOLKIT_STACK_NAME);
        if (!stack) {
            logging_1.debug('The environment %s doesn\'t have the CDK toolkit stack (%s) installed. Use %s to setup your environment for use with the toolkit.', environment.name, stackName, colors.blue(`cdk bootstrap "${environment.name}"`));
            return undefined;
        }
        if (stack.stackStatus.isCreationFailure) {
            // Treat a "failed to create" bootstrap stack as an absent one.
            logging_1.debug('The environment %s has a CDK toolkit stack (%s) that failed to create. Use %s to try provisioning it again.', environment.name, stackName, colors.blue(`cdk bootstrap "${environment.name}"`));
            return undefined;
        }
        const outputs = stack.outputs;
        return new ToolkitInfo({
            sdk, environment,
            bucketName: requireOutput(bootstrap_1.BUCKET_NAME_OUTPUT),
            bucketEndpoint: requireOutput(bootstrap_1.BUCKET_DOMAIN_NAME_OUTPUT),
            version: parseInt((_a = outputs[bootstrap_1.BOOTSTRAP_VERSION_OUTPUT]) !== null && _a !== void 0 ? _a : '0', 10),
        });
        function requireOutput(output) {
            if (!(output in outputs)) {
                throw new Error(`The CDK toolkit stack (${stack.stackName}) does not have an output named ${output}. Use 'cdk bootstrap' to correct this.`);
            }
            return outputs[output];
        }
    }
    get bucketUrl() {
        return `https://${this.props.bucketEndpoint}`;
    }
    get bucketName() {
        return this.props.bucketName;
    }
    get version() {
        return this.props.version;
    }
    /**
     * Prepare an ECR repository for uploading to using Docker
     *
     * @experimental
     */
    async prepareEcrRepository(repositoryName) {
        var _a, _b;
        const ecr = await this.ecr();
        // check if repo already exists
        try {
            logging_1.debug(`${repositoryName}: checking if ECR repository already exists`);
            const describeResponse = await ecr.describeRepositories({ repositoryNames: [repositoryName] }).promise();
            const existingRepositoryUri = (_a = describeResponse.repositories[0]) === null || _a === void 0 ? void 0 : _a.repositoryUri;
            if (existingRepositoryUri) {
                return { repositoryUri: existingRepositoryUri };
            }
        }
        catch (e) {
            if (e.code !== 'RepositoryNotFoundException') {
                throw e;
            }
        }
        // create the repo (tag it so it will be easier to garbage collect in the future)
        logging_1.debug(`${repositoryName}: creating ECR repository`);
        const assetTag = { Key: 'awscdk:asset', Value: 'true' };
        const response = await ecr.createRepository({ repositoryName, tags: [assetTag] }).promise();
        const repositoryUri = (_b = response.repository) === null || _b === void 0 ? void 0 : _b.repositoryUri;
        if (!repositoryUri) {
            throw new Error(`CreateRepository did not return a repository URI for ${repositoryUri}`);
        }
        // configure image scanning on push (helps in identifying software vulnerabilities, no additional charge)
        logging_1.debug(`${repositoryName}: enable image scanning`);
        await ecr.putImageScanningConfiguration({ repositoryName, imageScanningConfiguration: { scanOnPush: true } }).promise();
        return { repositoryUri };
    }
    async ecr() {
        return this.sdk.ecr();
    }
}
exports.ToolkitInfo = ToolkitInfo;
//# sourceMappingURL=data:application/json;base64,