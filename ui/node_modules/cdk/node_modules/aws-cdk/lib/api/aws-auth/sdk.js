"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = void 0;
const AWS = require("aws-sdk");
const logging_1 = require("../../logging");
const functions_1 = require("../../util/functions");
const account_cache_1 = require("./account-cache");
/**
 * Base functionality of SDK without credential fetching
 */
class SDK {
    constructor(credentials, region, httpOptions = {}) {
        this.credentials = credentials;
        /**
         * Default retry options for SDK clients.
         */
        this.retryOptions = { maxRetries: 6, retryDelayOptions: { base: 300 } };
        /**
         * The more generous retry policy for CloudFormation, which has a 1 TPM limit on certain APIs,
         * which are abundantly used for deployment tracking, ...
         *
         * So we're allowing way more retries, but waiting a bit more.
         */
        this.cloudFormationRetryOptions = { maxRetries: 10, retryDelayOptions: { base: 1000 } };
        this.config = {
            ...httpOptions,
            ...this.retryOptions,
            credentials,
            region,
            logger: { log: (...messages) => messages.forEach(m => logging_1.trace('%s', m)) },
        };
        this.currentRegion = region;
    }
    cloudFormation() {
        return wrapServiceErrorHandling(new AWS.CloudFormation({
            ...this.config,
            ...this.cloudFormationRetryOptions,
        }));
    }
    ec2() {
        return wrapServiceErrorHandling(new AWS.EC2(this.config));
    }
    ssm() {
        return wrapServiceErrorHandling(new AWS.SSM(this.config));
    }
    s3() {
        return wrapServiceErrorHandling(new AWS.S3(this.config));
    }
    route53() {
        return wrapServiceErrorHandling(new AWS.Route53(this.config));
    }
    ecr() {
        return wrapServiceErrorHandling(new AWS.ECR(this.config));
    }
    async currentAccount() {
        return functions_1.cached(this, CURRENT_ACCOUNT_KEY, () => SDK.accountCache.fetch(this.credentials.accessKeyId, async () => {
            // if we don't have one, resolve from STS and store in cache.
            logging_1.debug('Looking up default account ID from STS');
            const result = await new AWS.STS(this.config).getCallerIdentity().promise();
            const accountId = result.Account;
            const partition = result.Arn.split(':')[1];
            if (!accountId) {
                throw new Error('STS didn\'t return an account ID');
            }
            logging_1.debug('Default account ID:', accountId);
            return { accountId, partition };
        }));
    }
}
exports.SDK = SDK;
SDK.accountCache = new account_cache_1.AccountAccessKeyCache();
/**
 * Return a wrapping object for the underlying service object
 *
 * Responds to failures in the underlying service calls, in two different
 * ways:
 *
 * - When errors are encountered, log the failing call and the error that
 *   it triggered (at debug level). This is necessary because the lack of
 *   stack traces in NodeJS otherwise makes it very hard to suss out where
 *   a certain AWS error occurred.
 * - The JS SDK has a funny business of wrapping any credential-based error
 *   in a super-generic (and in our case wrong) exception. If we then use a
 *   'ChainableTemporaryCredentials' and the target role doesn't exist,
 *   the error message that shows up by default is super misleading
 *   (https://github.com/aws/aws-sdk-js/issues/3272). We can fix this because
 *   the exception contains the "inner exception", so we unwrap and throw
 *   the correct error ("cannot assume role").
 *
 * The wrapping business below is slightly more complicated than you'd think
 * because we must hook into the `promise()` method of the object that's being
 * returned from the methods of the object that we wrap, so there's two
 * levels of wrapping going on, and also some exceptions to the wrapping magic.
 */
function wrapServiceErrorHandling(serviceObject) {
    const classObject = serviceObject.constructor.prototype;
    return new Proxy(serviceObject, {
        get(obj, prop) {
            const real = obj[prop];
            // Things we don't want to intercept:
            // - Anything that's not a function.
            // - 'constructor', s3.upload() will use this to do some magic and we need the underlying constructor.
            // - Any method that's not on the service class (do not intercept 'makeRequest' and other helpers).
            if (prop === 'constructor' || !classObject.hasOwnProperty(prop) || !isFunction(real)) {
                return real;
            }
            // NOTE: This must be a function() and not an () => {
            // because I need 'this' to be dynamically bound and not statically bound.
            // If your linter complains don't listen to it!
            return function () {
                // Call the underlying function. If it returns an object with a promise()
                // method on it, wrap that 'promise' method.
                const args = [].slice.call(arguments, 0);
                const response = real.apply(this, args);
                // Don't intercept unless the return value is an object with a '.promise()' method.
                if (typeof response !== 'object' || !response) {
                    return response;
                }
                if (!('promise' in response)) {
                    return response;
                }
                // Return an object with the promise method replaced with a wrapper which will
                // do additional things to errors.
                return Object.assign(Object.create(response), {
                    promise() {
                        return response.promise().catch((e) => {
                            e = makeDetailedException(e);
                            logging_1.debug(`Call failed: ${prop}(${JSON.stringify(args[0])}) => ${e.message}`);
                            return Promise.reject(e); // Re-'throw' the new error
                        });
                    },
                });
            };
        },
    });
}
const CURRENT_ACCOUNT_KEY = Symbol('current_account_key');
function isFunction(x) {
    return x && {}.toString.call(x) === '[object Function]';
}
/**
 * Extract a more detailed error out of a generic error if we can
 */
function makeDetailedException(e) {
    // This is the super-generic "something's wrong" error that the JS SDK wraps other errors in.
    // https://github.com/aws/aws-sdk-js/blob/f0ac2e53457c7512883d0677013eacaad6cd8a19/lib/event_listeners.js#L84
    if (typeof e.message === 'string' && e.message.startsWith('Missing credentials in config')) {
        const original = e.originalError;
        if (original) {
            // When the SDK does a 'util.copy', they lose the Error-ness of the inner error
            // (they copy the Error's properties into a plain object) so make it an Error object again.
            e = Object.assign(new Error(), original);
        }
    }
    // At this point, the error might still be a generic "ChainableTemporaryCredentials failed"
    // error which wraps the REAL error (AssumeRole failed). We're going to replace the error
    // message with one that's more likely to help users, and tell them the most probable
    // fix (bootstrapping). The underlying service call failure will be appended below.
    if (e.message === 'Could not load credentials from ChainableTemporaryCredentials') {
        e.message = 'Could not assume role in target account (did you bootstrap the environment with the right \'--trust\'s?)';
    }
    // Replace the message on this error with a concatenation of all inner error messages.
    // Must more clear what's going on that way.
    e.message = allChainedExceptionMessages(e);
    return e;
}
/**
 * Return the concatenated message of all exceptions in the AWS exception chain
 */
function allChainedExceptionMessages(e) {
    const ret = new Array();
    while (e) {
        ret.push(e.message);
        e = e.originalError;
    }
    return ret.join(': ');
}
//# sourceMappingURL=data:application/json;base64,