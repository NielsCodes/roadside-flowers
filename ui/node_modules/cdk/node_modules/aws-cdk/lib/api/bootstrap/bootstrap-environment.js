"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bootstrapEnvironment2 = exports.bootstrapEnvironment = void 0;
const path = require("path");
const serialize_1 = require("../../serialize");
const deploy_bootstrap_1 = require("./deploy-bootstrap");
const legacy_template_1 = require("./legacy-template");
// tslint:disable:max-line-length
/**
 * Deploy legacy bootstrap stack
 *
 * @experimental
 */
async function bootstrapEnvironment(environment, sdkProvider, options) {
    var _a, _b, _c;
    const params = (_a = options.parameters) !== null && _a !== void 0 ? _a : {};
    if ((_b = params.trustedAccounts) === null || _b === void 0 ? void 0 : _b.length) {
        throw new Error('--trust can only be passed for the new bootstrap experience.');
    }
    if ((_c = params.cloudFormationExecutionPolicies) === null || _c === void 0 ? void 0 : _c.length) {
        throw new Error('--cloudformation-execution-policies can only be passed for the new bootstrap experience.');
    }
    if (params.qualifier) {
        throw new Error('--qualifier can only be passed for the new bootstrap experience.');
    }
    return deploy_bootstrap_1.deployBootstrapStack(legacy_template_1.legacyBootstrapTemplate(params), {}, environment, sdkProvider, options);
}
exports.bootstrapEnvironment = bootstrapEnvironment;
/**
 * Deploy CI/CD-ready bootstrap stack from template
 *
 * @experimental
 */
async function bootstrapEnvironment2(environment, sdkProvider, options) {
    var _a, _b, _c, _d, _e;
    const params = (_a = options.parameters) !== null && _a !== void 0 ? _a : {};
    if (((_b = params.trustedAccounts) === null || _b === void 0 ? void 0 : _b.length) && !((_c = params.cloudFormationExecutionPolicies) === null || _c === void 0 ? void 0 : _c.length)) {
        throw new Error('--cloudformation-execution-policies are required if --trust has been passed!');
    }
    const bootstrapTemplatePath = path.join(__dirname, 'bootstrap-template.yaml');
    const bootstrapTemplate = await serialize_1.loadStructuredFile(bootstrapTemplatePath);
    return deploy_bootstrap_1.deployBootstrapStack(bootstrapTemplate, {
        FileAssetsBucketName: params.bucketName,
        FileAssetsBucketKmsKeyId: params.kmsKeyId,
        TrustedAccounts: (_d = params.trustedAccounts) === null || _d === void 0 ? void 0 : _d.join(','),
        CloudFormationExecutionPolicies: (_e = params.cloudFormationExecutionPolicies) === null || _e === void 0 ? void 0 : _e.join(','),
        Qualifier: params.qualifier,
        PublicAccessBlockConfiguration: params.publicAccessBlockConfiguration || params.publicAccessBlockConfiguration === undefined ? 'true' : 'false',
    }, environment, sdkProvider, options);
}
exports.bootstrapEnvironment2 = bootstrapEnvironment2;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLWVudmlyb25tZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYm9vdHN0cmFwLWVudmlyb25tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLDZCQUE2QjtBQUM3QiwrQ0FBcUQ7QUFJckQseURBQTBEO0FBQzFELHVEQUE0RDtBQUU1RCxpQ0FBaUM7QUFFakM7Ozs7R0FJRztBQUNJLEtBQUssVUFBVSxvQkFBb0IsQ0FBQyxXQUE4QixFQUFFLFdBQXdCLEVBQUUsT0FBb0M7O0lBQ3ZJLE1BQU0sTUFBTSxTQUFHLE9BQU8sQ0FBQyxVQUFVLG1DQUFJLEVBQUUsQ0FBQztJQUV4QyxVQUFJLE1BQU0sQ0FBQyxlQUFlLDBDQUFFLE1BQU0sRUFBRTtRQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLDhEQUE4RCxDQUFDLENBQUM7S0FDakY7SUFDRCxVQUFJLE1BQU0sQ0FBQywrQkFBK0IsMENBQUUsTUFBTSxFQUFFO1FBQ2xELE1BQU0sSUFBSSxLQUFLLENBQUMsMEZBQTBGLENBQUMsQ0FBQztLQUM3RztJQUNELElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7S0FDckY7SUFFRCxPQUFPLHVDQUFvQixDQUN6Qix5Q0FBdUIsQ0FBQyxNQUFNLENBQUMsRUFDL0IsRUFBRSxFQUNGLFdBQVcsRUFDWCxXQUFXLEVBQ1gsT0FBTyxDQUFDLENBQUM7QUFDYixDQUFDO0FBbkJELG9EQW1CQztBQUVEOzs7O0dBSUc7QUFDSSxLQUFLLFVBQVUscUJBQXFCLENBQ3pDLFdBQThCLEVBQzlCLFdBQXdCLEVBQ3hCLE9BQW9DOztJQUVwQyxNQUFNLE1BQU0sU0FBRyxPQUFPLENBQUMsVUFBVSxtQ0FBSSxFQUFFLENBQUM7SUFFeEMsSUFBSSxPQUFBLE1BQU0sQ0FBQyxlQUFlLDBDQUFFLE1BQU0sS0FBSSxRQUFDLE1BQU0sQ0FBQywrQkFBK0IsMENBQUUsTUFBTSxDQUFBLEVBQUU7UUFDckYsTUFBTSxJQUFJLEtBQUssQ0FBQyw4RUFBOEUsQ0FBQyxDQUFDO0tBQ2pHO0lBRUQsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSx5QkFBeUIsQ0FBQyxDQUFDO0lBQzlFLE1BQU0saUJBQWlCLEdBQUcsTUFBTSw4QkFBa0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBRTFFLE9BQU8sdUNBQW9CLENBQ3pCLGlCQUFpQixFQUNqQjtRQUNFLG9CQUFvQixFQUFFLE1BQU0sQ0FBQyxVQUFVO1FBQ3ZDLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxRQUFRO1FBQ3pDLGVBQWUsUUFBRSxNQUFNLENBQUMsZUFBZSwwQ0FBRSxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ2xELCtCQUErQixRQUFFLE1BQU0sQ0FBQywrQkFBK0IsMENBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNsRixTQUFTLEVBQUUsTUFBTSxDQUFDLFNBQVM7UUFDM0IsOEJBQThCLEVBQUUsTUFBTSxDQUFDLDhCQUE4QixJQUFJLE1BQU0sQ0FBQyw4QkFBOEIsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTztLQUNoSixFQUNELFdBQVcsRUFDWCxXQUFXLEVBQ1gsT0FBTyxDQUFDLENBQUM7QUFDYixDQUFDO0FBM0JELHNEQTJCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGN4YXBpIGZyb20gJ0Bhd3MtY2RrL2N4LWFwaSc7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgbG9hZFN0cnVjdHVyZWRGaWxlIH0gZnJvbSAnLi4vLi4vc2VyaWFsaXplJztcbmltcG9ydCB7IFNka1Byb3ZpZGVyIH0gZnJvbSAnLi4vYXdzLWF1dGgnO1xuaW1wb3J0IHsgRGVwbG95U3RhY2tSZXN1bHQgfSBmcm9tICcuLi9kZXBsb3ktc3RhY2snO1xuaW1wb3J0IHsgQm9vdHN0cmFwRW52aXJvbm1lbnRPcHRpb25zIH0gZnJvbSAnLi9ib290c3RyYXAtcHJvcHMnO1xuaW1wb3J0IHsgZGVwbG95Qm9vdHN0cmFwU3RhY2sgfSBmcm9tICcuL2RlcGxveS1ib290c3RyYXAnO1xuaW1wb3J0IHsgbGVnYWN5Qm9vdHN0cmFwVGVtcGxhdGUgfSBmcm9tICcuL2xlZ2FjeS10ZW1wbGF0ZSc7XG5cbi8vIHRzbGludDpkaXNhYmxlOm1heC1saW5lLWxlbmd0aFxuXG4vKipcbiAqIERlcGxveSBsZWdhY3kgYm9vdHN0cmFwIHN0YWNrXG4gKlxuICogQGV4cGVyaW1lbnRhbFxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYm9vdHN0cmFwRW52aXJvbm1lbnQoZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50LCBzZGtQcm92aWRlcjogU2RrUHJvdmlkZXIsIG9wdGlvbnM6IEJvb3RzdHJhcEVudmlyb25tZW50T3B0aW9ucyk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcbiAgY29uc3QgcGFyYW1zID0gb3B0aW9ucy5wYXJhbWV0ZXJzID8/IHt9O1xuXG4gIGlmIChwYXJhbXMudHJ1c3RlZEFjY291bnRzPy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJy0tdHJ1c3QgY2FuIG9ubHkgYmUgcGFzc2VkIGZvciB0aGUgbmV3IGJvb3RzdHJhcCBleHBlcmllbmNlLicpO1xuICB9XG4gIGlmIChwYXJhbXMuY2xvdWRGb3JtYXRpb25FeGVjdXRpb25Qb2xpY2llcz8ubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCctLWNsb3VkZm9ybWF0aW9uLWV4ZWN1dGlvbi1wb2xpY2llcyBjYW4gb25seSBiZSBwYXNzZWQgZm9yIHRoZSBuZXcgYm9vdHN0cmFwIGV4cGVyaWVuY2UuJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy5xdWFsaWZpZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJy0tcXVhbGlmaWVyIGNhbiBvbmx5IGJlIHBhc3NlZCBmb3IgdGhlIG5ldyBib290c3RyYXAgZXhwZXJpZW5jZS4nKTtcbiAgfVxuXG4gIHJldHVybiBkZXBsb3lCb290c3RyYXBTdGFjayhcbiAgICBsZWdhY3lCb290c3RyYXBUZW1wbGF0ZShwYXJhbXMpLFxuICAgIHt9LFxuICAgIGVudmlyb25tZW50LFxuICAgIHNka1Byb3ZpZGVyLFxuICAgIG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIERlcGxveSBDSS9DRC1yZWFkeSBib290c3RyYXAgc3RhY2sgZnJvbSB0ZW1wbGF0ZVxuICpcbiAqIEBleHBlcmltZW50YWxcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJvb3RzdHJhcEVudmlyb25tZW50MihcbiAgZW52aXJvbm1lbnQ6IGN4YXBpLkVudmlyb25tZW50LFxuICBzZGtQcm92aWRlcjogU2RrUHJvdmlkZXIsXG4gIG9wdGlvbnM6IEJvb3RzdHJhcEVudmlyb25tZW50T3B0aW9ucyk6IFByb21pc2U8RGVwbG95U3RhY2tSZXN1bHQ+IHtcblxuICBjb25zdCBwYXJhbXMgPSBvcHRpb25zLnBhcmFtZXRlcnMgPz8ge307XG5cbiAgaWYgKHBhcmFtcy50cnVzdGVkQWNjb3VudHM/Lmxlbmd0aCAmJiAhcGFyYW1zLmNsb3VkRm9ybWF0aW9uRXhlY3V0aW9uUG9saWNpZXM/Lmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignLS1jbG91ZGZvcm1hdGlvbi1leGVjdXRpb24tcG9saWNpZXMgYXJlIHJlcXVpcmVkIGlmIC0tdHJ1c3QgaGFzIGJlZW4gcGFzc2VkIScpO1xuICB9XG5cbiAgY29uc3QgYm9vdHN0cmFwVGVtcGxhdGVQYXRoID0gcGF0aC5qb2luKF9fZGlybmFtZSwgJ2Jvb3RzdHJhcC10ZW1wbGF0ZS55YW1sJyk7XG4gIGNvbnN0IGJvb3RzdHJhcFRlbXBsYXRlID0gYXdhaXQgbG9hZFN0cnVjdHVyZWRGaWxlKGJvb3RzdHJhcFRlbXBsYXRlUGF0aCk7XG5cbiAgcmV0dXJuIGRlcGxveUJvb3RzdHJhcFN0YWNrKFxuICAgIGJvb3RzdHJhcFRlbXBsYXRlLFxuICAgIHtcbiAgICAgIEZpbGVBc3NldHNCdWNrZXROYW1lOiBwYXJhbXMuYnVja2V0TmFtZSxcbiAgICAgIEZpbGVBc3NldHNCdWNrZXRLbXNLZXlJZDogcGFyYW1zLmttc0tleUlkLFxuICAgICAgVHJ1c3RlZEFjY291bnRzOiBwYXJhbXMudHJ1c3RlZEFjY291bnRzPy5qb2luKCcsJyksXG4gICAgICBDbG91ZEZvcm1hdGlvbkV4ZWN1dGlvblBvbGljaWVzOiBwYXJhbXMuY2xvdWRGb3JtYXRpb25FeGVjdXRpb25Qb2xpY2llcz8uam9pbignLCcpLFxuICAgICAgUXVhbGlmaWVyOiBwYXJhbXMucXVhbGlmaWVyLFxuICAgICAgUHVibGljQWNjZXNzQmxvY2tDb25maWd1cmF0aW9uOiBwYXJhbXMucHVibGljQWNjZXNzQmxvY2tDb25maWd1cmF0aW9uIHx8IHBhcmFtcy5wdWJsaWNBY2Nlc3NCbG9ja0NvbmZpZ3VyYXRpb24gPT09IHVuZGVmaW5lZCA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgfSxcbiAgICBlbnZpcm9ubWVudCxcbiAgICBzZGtQcm92aWRlcixcbiAgICBvcHRpb25zKTtcbn0iXX0=