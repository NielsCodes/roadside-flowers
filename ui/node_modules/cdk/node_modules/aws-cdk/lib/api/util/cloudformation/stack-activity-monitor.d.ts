/// <reference types="node" />
import * as cxschema from '@aws-cdk/cloud-assembly-schema';
import * as cxapi from '@aws-cdk/cx-api';
import * as aws from 'aws-sdk';
import { LogLevel } from '../../../logging';
interface StackActivity {
    readonly event: aws.CloudFormation.StackEvent;
    readonly metadata?: ResourceMetadata;
    flushed: boolean;
}
interface ResourceMetadata {
    entry: cxschema.MetadataEntry;
    constructPath: string;
}
export interface StackActivityMonitorProps {
    /**
     * Total number of resources to update
     *
     * Used to calculate a progress bar.
     *
     * @default - No progress reporting.
     */
    readonly resourcesTotal?: number;
    /**
     * The log level that was requested in the CLI
     *
     * If verbose or trace is requested, we'll always use the full history printer.
     *
     * @default - Use value from logging.logLevel
     */
    readonly logLevel?: LogLevel;
}
export declare class StackActivityMonitor {
    private readonly cfn;
    private readonly stackName;
    private readonly stack;
    private active;
    private activity;
    /**
     * Number of ms to wait between pagination calls
     */
    private readonly pageSleep;
    /**
     * Determines which events not to display
     */
    private startTime;
    /**
     * Current tick timer
     */
    private tickTimer?;
    /**
     * Set to the activity of reading the current events
     */
    private readPromise?;
    private readonly printer;
    constructor(cfn: aws.CloudFormation, stackName: string, stack: cxapi.CloudFormationStackArtifact, options?: StackActivityMonitorProps);
    start(): this;
    stop(): Promise<void>;
    private scheduleNextTick;
    private tick;
    /**
     * Flushes all unflushed events sorted by timestamp.
     */
    private flushEvents;
    private findMetadataFor;
    private readEvents;
    private simplifyConstructPath;
}
interface PrinterProps {
    /**
     * Total resources to deploy
     */
    readonly resourcesTotal?: number;
    /**
     * The with of the "resource type" column.
     */
    readonly resourceTypeColumnWidth: number;
    /**
     * Stream to write to
     */
    readonly stream: NodeJS.WriteStream;
}
declare abstract class ActivityPrinterBase {
    protected readonly props: PrinterProps;
    /**
     * Fetch new activity every 5 seconds
     */
    readonly updateSleep: number;
    /**
     * A list of resource IDs which are currently being processed
     */
    protected resourcesInProgress: Record<string, StackActivity>;
    /**
     * Previous completion state observed by logical ID
     *
     * We use this to detect that if we see a DELETE_COMPLETE after a
     * CREATE_COMPLETE, it's actually a rollback and we should DECREASE
     * resourcesDone instead of increase it
     */
    protected resourcesPrevCompleteState: Record<string, string>;
    /**
     * Count of resources that have reported a _COMPLETE status
     */
    protected resourcesDone: number;
    /**
     * How many digits we need to represent the total count (for lining up the status reporting)
     */
    protected readonly resourceDigits: number;
    protected readonly resourcesTotal?: number;
    protected rollingBack: boolean;
    protected readonly failures: StackActivity[];
    protected readonly stream: NodeJS.WriteStream;
    constructor(props: PrinterProps);
    addActivity(activity: StackActivity): void;
    abstract print(): void;
    start(): void;
    stop(): void;
}
/**
 * Activity Printer which shows a full log of all CloudFormation events
 *
 * When there hasn't been activity for a while, it will print the resources
 * that are currently in progress, to show what's holding up the deployment.
 */
export declare class HistoryActivityPrinter extends ActivityPrinterBase {
    /**
     * Last time we printed something to the console.
     *
     * Used to measure timeout for progress reporting.
     */
    private lastPrintTime;
    /**
     * Number of ms of change absence before we tell the user about the resources that are currently in progress.
     */
    private readonly inProgressDelay;
    private readonly printable;
    constructor(props: PrinterProps);
    addActivity(activity: StackActivity): void;
    print(): void;
    private printOne;
    /**
     * Report the current progress as a [34/42] string, or just [34] if the total is unknown
     */
    private progress;
    /**
     * If some resources are taking a while to create, notify the user about what's currently in progress
     */
    private printInProgress;
}
/**
 * Activity Printer which shows the resources currently being updated
 *
 * It will continuously reupdate the terminal and show only the resources
 * that are currently being updated, in addition to a progress bar which
 * shows how far along the deployment is.
 *
 * Resources that have failed will always be shown, and will be recapitulated
 * along with their stack trace when the monitoring ends.
 *
 * Resources that failed deployment because they have been cancelled are
 * not included.
 */
export declare class CurrentActivityPrinter extends ActivityPrinterBase {
    /**
     * This looks very disorienting sleeping for 5 seconds. Update quicker.
     */
    readonly updateSleep: number;
    private oldLogLevel;
    private block;
    constructor(props: PrinterProps);
    print(): void;
    start(): void;
    stop(): void;
    private progressBar;
    private failureReasonOnNextLine;
}
export {};
