import { ɵɵdefineInjectable, Injectable, EventEmitter, Directive, ElementRef, Input, Output, HostListener, NgModule } from '@angular/core';
import { saveAs } from 'file-saver';
import { HttpParams, HttpClient } from '@angular/common/http';
import 'rxjs';

class FileSaverService {
    get isFileSaverSupported() {
        try {
            return !!new Blob();
        }
        catch (e) {
            return false;
        }
    }
    genType(fileName) {
        if (!fileName || fileName.lastIndexOf('.') === -1) {
            return 'text/plain';
        }
        const type = fileName.substr(fileName.lastIndexOf('.') + 1);
        switch (type) {
            case 'txt':
                return 'text/plain';
            case 'xml':
            case 'html':
                return `text/${type}`;
            case 'json':
                return 'octet/stream';
            default:
                return `application/${type}`;
        }
    }
    save(blob, fileName, filtType, option) {
        if (!blob) {
            throw new Error('Data argument should be a blob instance');
        }
        const file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });
        saveAs(file, decodeURI(fileName || 'download'), option);
    }
    saveText(txt, fileName, option) {
        const blob = new Blob([txt]);
        this.save(blob, fileName, null, option);
    }
}
FileSaverService.ɵprov = ɵɵdefineInjectable({ factory: function FileSaverService_Factory() { return new FileSaverService(); }, token: FileSaverService, providedIn: "root" });
FileSaverService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];

class FileSaverDirective {
    constructor(el, fss, httpClient) {
        this.el = el;
        this.fss = fss;
        this.httpClient = httpClient;
        this.method = 'GET';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        if (!fss.isFileSaverSupported) {
            el.nativeElement.classList.add(`filesaver__not-support`);
        }
    }
    getName(res) {
        return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));
    }
    _click() {
        if (!this.fss.isFileSaverSupported) {
            return;
        }
        let req = this.http;
        if (!req) {
            const params = new HttpParams();
            const query = this.query || {};
            // tslint:disable-next-line:forin
            for (const item in query) {
                params.set(item, query[item]);
            }
            req = this.httpClient.request(this.method, this.url, {
                observe: 'response',
                responseType: 'blob',
                headers: this.header,
                params,
            });
        }
        this.setDisabled(true);
        req.subscribe(res => {
            if (res.status !== 200 || res.body.size <= 0) {
                this.error.emit(res);
                return;
            }
            this.fss.save(res.body, this.getName(res), null, this.fsOptions);
            this.success.emit(res);
        }, err => this.error.emit(err), () => this.setDisabled(false));
    }
    setDisabled(status) {
        const el = this.el.nativeElement;
        el.disabled = status;
        el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);
    }
}
FileSaverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fileSaver]',
                exportAs: 'fileSaver',
            },] }
];
FileSaverDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: FileSaverService },
    { type: HttpClient }
];
FileSaverDirective.propDecorators = {
    method: [{ type: Input }],
    http: [{ type: Input }],
    query: [{ type: Input }],
    header: [{ type: Input }],
    url: [{ type: Input }],
    fileName: [{ type: Input }],
    fsOptions: [{ type: Input }],
    success: [{ type: Output }],
    error: [{ type: Output }],
    _click: [{ type: HostListener, args: ['click',] }]
};

class FileSaverModule {
}
FileSaverModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FileSaverDirective],
                exports: [FileSaverDirective],
            },] }
];

/**
 * Generated bundle index. Do not edit.
 */

export { FileSaverDirective, FileSaverModule, FileSaverService };
//# sourceMappingURL=ngx-filesaver.js.map
