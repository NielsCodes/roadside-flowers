{"version":3,"file":"ngx-filesaver.umd.js","sources":["../../lib/src/filesaver.service.ts","../../lib/src/filesaver.directive.ts","../../lib/src/filesaver.module.ts","../../lib/ngx-filesaver.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { saveAs, FileSaverOptions } from 'file-saver';\n\n@Injectable({ providedIn: 'root' })\nexport class FileSaverService {\n  get isFileSaverSupported(): boolean {\n    try {\n      return !!new Blob();\n    } catch (e) {\n      return false;\n    }\n  }\n\n  genType(fileName?: string): string {\n    if (!fileName || fileName.lastIndexOf('.') === -1) {\n      return 'text/plain';\n    }\n    const type = fileName.substr(fileName.lastIndexOf('.') + 1);\n    switch (type) {\n      case 'txt':\n        return 'text/plain';\n      case 'xml':\n      case 'html':\n        return `text/${type}`;\n      case 'json':\n        return 'octet/stream';\n      default:\n        return `application/${type}`;\n    }\n  }\n\n  save(blob: Blob, fileName?: string, filtType?: string, option?: FileSaverOptions): void {\n    if (!blob) {\n      throw new Error('Data argument should be a blob instance');\n    }\n\n    const file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });\n    saveAs(file, decodeURI(fileName || 'download'), option);\n  }\n\n  saveText(txt: string, fileName?: string, option?: FileSaverOptions): void {\n    const blob = new Blob([txt]);\n    this.save(blob, fileName, null, option);\n  }\n}\n","import { Directive, ElementRef, Input, HostListener, EventEmitter, Output } from '@angular/core';\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { FileSaverOptions } from 'file-saver';\nimport { FileSaverService } from './filesaver.service';\n\n@Directive({\n  selector: '[fileSaver]',\n  exportAs: 'fileSaver',\n})\nexport class FileSaverDirective {\n  @Input() method = 'GET';\n  @Input() http: Observable<HttpResponse<Blob>>;\n  @Input() query: any;\n  @Input() header: any;\n  @Input() url: string;\n  @Input() fileName: string;\n  @Input() fsOptions: FileSaverOptions;\n  @Output() readonly success = new EventEmitter<HttpResponse<Blob>>();\n  @Output() readonly error = new EventEmitter<any>();\n\n  constructor(private el: ElementRef<HTMLButtonElement>, private fss: FileSaverService, private httpClient: HttpClient) {\n    if (!fss.isFileSaverSupported) {\n      el.nativeElement.classList.add(`filesaver__not-support`);\n    }\n  }\n\n  private getName(res: HttpResponse<Blob>) {\n    return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));\n  }\n\n  @HostListener('click')\n  _click() {\n    if (!this.fss.isFileSaverSupported) {\n      return;\n    }\n    let req = this.http;\n    if (!req) {\n      const params = new HttpParams();\n      const query = this.query || {};\n      // tslint:disable-next-line:forin\n      for (const item in query) {\n        params.set(item, query[item]);\n      }\n\n      req = this.httpClient.request(this.method, this.url, {\n        observe: 'response',\n        responseType: 'blob',\n        headers: this.header,\n        params,\n      });\n    }\n\n    this.setDisabled(true);\n    req.subscribe(\n      res => {\n        if (res.status !== 200 || res.body.size <= 0) {\n          this.error.emit(res);\n          return;\n        }\n        this.fss.save(res.body, this.getName(res), null, this.fsOptions);\n        this.success.emit(res);\n      },\n      err => this.error.emit(err),\n      () => this.setDisabled(false),\n    );\n  }\n\n  private setDisabled(status: boolean) {\n    const el = this.el.nativeElement;\n    el.disabled = status;\n    el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FileSaverDirective } from './filesaver.directive';\n\n@NgModule({\n  declarations: [FileSaverDirective],\n  exports: [FileSaverDirective],\n})\nexport class FileSaverModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["saveAs","Injectable","EventEmitter","HttpParams","Directive","ElementRef","HttpClient","Input","Output","HostListener","NgModule"],"mappings":"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"}