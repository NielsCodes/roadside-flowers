(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('file-saver'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('ngxFileSaver', ['exports', '@angular/core', 'file-saver', '@angular/common/http'], factory) :
    (global = global || self, factory(global.ngxFileSaver = {}, global.ng.core, global.saveAs, global.ng.common.http));
}(this, (function (exports, i0, fileSaver, http) { 'use strict';

    var FileSaverService = /** @class */ (function () {
        function FileSaverService() {
        }
        Object.defineProperty(FileSaverService.prototype, "isFileSaverSupported", {
            get: function () {
                try {
                    return !!new Blob();
                }
                catch (e) {
                    return false;
                }
            },
            enumerable: false,
            configurable: true
        });
        FileSaverService.prototype.genType = function (fileName) {
            if (!fileName || fileName.lastIndexOf('.') === -1) {
                return 'text/plain';
            }
            var type = fileName.substr(fileName.lastIndexOf('.') + 1);
            switch (type) {
                case 'txt':
                    return 'text/plain';
                case 'xml':
                case 'html':
                    return "text/" + type;
                case 'json':
                    return 'octet/stream';
                default:
                    return "application/" + type;
            }
        };
        FileSaverService.prototype.save = function (blob, fileName, filtType, option) {
            if (!blob) {
                throw new Error('Data argument should be a blob instance');
            }
            var file = new Blob([blob], { type: filtType || blob.type || this.genType(fileName) });
            fileSaver.saveAs(file, decodeURI(fileName || 'download'), option);
        };
        FileSaverService.prototype.saveText = function (txt, fileName, option) {
            var blob = new Blob([txt]);
            this.save(blob, fileName, null, option);
        };
        return FileSaverService;
    }());
    FileSaverService.ɵprov = i0.ɵɵdefineInjectable({ factory: function FileSaverService_Factory() { return new FileSaverService(); }, token: FileSaverService, providedIn: "root" });
    FileSaverService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    var FileSaverDirective = /** @class */ (function () {
        function FileSaverDirective(el, fss, httpClient) {
            this.el = el;
            this.fss = fss;
            this.httpClient = httpClient;
            this.method = 'GET';
            this.success = new i0.EventEmitter();
            this.error = new i0.EventEmitter();
            if (!fss.isFileSaverSupported) {
                el.nativeElement.classList.add("filesaver__not-support");
            }
        }
        FileSaverDirective.prototype.getName = function (res) {
            return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));
        };
        FileSaverDirective.prototype._click = function () {
            var _this = this;
            if (!this.fss.isFileSaverSupported) {
                return;
            }
            var req = this.http;
            if (!req) {
                var params = new http.HttpParams();
                var query = this.query || {};
                // tslint:disable-next-line:forin
                for (var item in query) {
                    params.set(item, query[item]);
                }
                req = this.httpClient.request(this.method, this.url, {
                    observe: 'response',
                    responseType: 'blob',
                    headers: this.header,
                    params: params,
                });
            }
            this.setDisabled(true);
            req.subscribe(function (res) {
                if (res.status !== 200 || res.body.size <= 0) {
                    _this.error.emit(res);
                    return;
                }
                _this.fss.save(res.body, _this.getName(res), null, _this.fsOptions);
                _this.success.emit(res);
            }, function (err) { return _this.error.emit(err); }, function () { return _this.setDisabled(false); });
        };
        FileSaverDirective.prototype.setDisabled = function (status) {
            var el = this.el.nativeElement;
            el.disabled = status;
            el.classList[status ? 'add' : 'remove']("filesaver__disabled");
        };
        return FileSaverDirective;
    }());
    FileSaverDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[fileSaver]',
                    exportAs: 'fileSaver',
                },] }
    ];
    FileSaverDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: FileSaverService },
        { type: http.HttpClient }
    ]; };
    FileSaverDirective.propDecorators = {
        method: [{ type: i0.Input }],
        http: [{ type: i0.Input }],
        query: [{ type: i0.Input }],
        header: [{ type: i0.Input }],
        url: [{ type: i0.Input }],
        fileName: [{ type: i0.Input }],
        fsOptions: [{ type: i0.Input }],
        success: [{ type: i0.Output }],
        error: [{ type: i0.Output }],
        _click: [{ type: i0.HostListener, args: ['click',] }]
    };

    var FileSaverModule = /** @class */ (function () {
        function FileSaverModule() {
        }
        return FileSaverModule;
    }());
    FileSaverModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [FileSaverDirective],
                    exports: [FileSaverDirective],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.FileSaverDirective = FileSaverDirective;
    exports.FileSaverModule = FileSaverModule;
    exports.FileSaverService = FileSaverService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-filesaver.umd.js.map
